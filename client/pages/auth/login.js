import { Form, Button } from "react-bootstrap";
import Head from "next/head";
import * as yup from "yup";
import { useFormik } from "formik";
import { LOGIN } from "../../utils/queries";
import { toast } from "react-toastify";
import { useState } from "react";
import FormWrapper from "../../components/FormWrapper";
import { useRouter } from "next/router";
import { useAuth, useSetAuth } from "../../context/authContext";
export default function Login() {
  const router = useRouter();

  const setAuth = useSetAuth();
  const [serverErrors, setServerErrors] = useState([]);
  const validationSchema = yup.object().shape({
    email: yup
      .string()
      .email("Email Type Invalid")
      .required("Email is Required"),
    password: yup.string().required("Password is Required"),
  });
  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validationSchema,
    onSubmit: async (values) => {
      const promise = new Promise(async (res, rej) => {
        try {
          const login = await LOGIN(values);
          if (login.status === "error") throw login;
          console.log(login);
          res("Login Successful!");
          setAuth({
            user: login.detail,
            isAuth: true,
          });
          router.push(
            router.query.redirect ? router.query.redirect : "/user/profile"
          );
          setServerErrors([]);
        } catch (error) {
          setServerErrors(error.detail.errors);
          rej("Login Error");
        }
      });
      toast.promise(promise, {
        pending: "Login In Progress",
        success: "Logged In Successfully",
        error: "Error while Logging In ",
      });
    },
  });
  return (
    <div class="account-pages pt-2  pt-sm-5 pb-4 pb-sm-5 mt-5">
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <FormWrapper
        form_title="Sign In"
        form_subtext="Enter your email address and password to access admin panel."
        card_footer_title="Don't have an account?"
        card_footer_link_text="Sign Up"
        card_footer_link="/auth/register"
      >
        {serverErrors.length > 0 && (
          <div className="alert alert-danger pb-0">
            <ul className="pb-0">
              {serverErrors.map((item, index) => {
                return (
                  <li className="p-0 pb-0" key={`login-error-${index}`}>
                    {item.msg}
                  </li>
                );
              })}
            </ul>
          </div>
        )}
        <Form onSubmit={formik.handleSubmit}>
          <Form.Group className="mb-3" controlId="exampleForm.ControlInput1">
            <Form.Label>Email Address</Form.Label>
            <Form.Control
              type="email"
              name="email"
              isInvalid={!!formik.errors.email}
              isValid={formik.touched.email && !formik.errors.email}
              value={formik.values.email}
              onChange={formik.handleChange}
              placeholder="Enter Your Email"
            />
            {formik.errors.email && (
              <small className="text-danger fst-italic">
                {formik.errors.email}
              </small>
            )}
          </Form.Group>
          <Form.Group className="mb-3" controlId="exampleForm.ControlInput2">
            <Form.Label>Password</Form.Label>
            <Form.Control
              type="password"
              name="password"
              isInvalid={!!formik.errors.password}
              isValid={formik.touched.password && !formik.errors.password}
              value={formik.values.password}
              onChange={formik.handleChange}
              placeholder="Enter Your Password"
            />
            {formik.errors.password && (
              <small className="text-danger fst-italic">
                {formik.errors.password}
              </small>
            )}
          </Form.Group>
          <Form.Group className="mb-0 text-center">
            <Button variant="primary" type="submit">
              Log In
            </Button>
          </Form.Group>
        </Form>
      </FormWrapper>
    </div>
  );
}
